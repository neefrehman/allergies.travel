/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable @typescript-eslint/no-var-requires */
import * as fs from "fs";

import fetch from "node-fetch";
import type { Country } from "world-countries";

// import type { ISO_639_1 } from "../utils/i18n/languageCodeMappings";
import { sluggify } from "../utils/sluggify";

const prettier = require("prettier");
const countryData: Country[] = require("world-countries"); // require needed to avoid `world_countries_1["default"]` error

const supportedLocales: string[] = require("../../next.config").i18n.locales;

/**
 * Uses the geonames API to fetch and cache localised location names that Intl.DisplayNames
 * can't create for us (region, capital, etc.). these are then used by `generateBaseCountryData.ts`
 */
const generateLocalisedLocationMappings = async () => {
    const prettierConfig = await prettier.resolveConfig("./.prettierrc");

    const directory = "src/utils/i18n";
    if (!fs.existsSync(directory)) {
        fs.mkdirSync(directory);
    }

    const getLocalisedName = async (
        nameInEnglish: string,
        locale: string
    ): Promise<string> => {
        try {
            const geonamesResponse = await fetch(
                `http://api.geonames.org/searchJSON?q=${sluggify(
                    nameInEnglish
                )}&maxRows=1&username=neef&lang=${locale}`
            );
            const data = await geonamesResponse.json();
            const locationName = data?.geonames?.[0]?.name ?? nameInEnglish;
            return locationName;
        } catch (err) {
            console.log(err);
            return nameInEnglish;
        }
    };

    const localesToQueryFor = supportedLocales.filter(locale => locale !== "en");
    const dataToCreateMappingsFor = {
        capitals: countryData.map(country => country.capital[0]),
        regions: [...new Set(countryData.map(country => country.region))],
        subregions: [...new Set(countryData.map(country => country.subregion))],
    } as { [k: string]: string[] };

    Object.keys(dataToCreateMappingsFor).forEach(key => {
        const mappedData = dataToCreateMappingsFor[key].reduce((acc, name) => {
            const locationNameMapping = {
                [name]: {
                    en: name,
                    ...localesToQueryFor.reduce((localeAcc, locale) => {
                        // const locationName = await getLocalisedName(name, locale); // also add aync above
                        const locationName = name;
                        return {
                            ...localeAcc,
                            [locale]: locationName,
                        };
                    }, {}),
                },
            };

            return { ...acc, ...locationNameMapping };
        }, {});

        const fileName = `${key.slice(0, -1)}NameMappings`;
        const formattedData = prettier.format(
            `
            /**
             * auto-generated by scripts/generateLocalisedLocationMappings.ts
             */
            export const ${fileName}: Record<string, Record<string, string>> = ${JSON.stringify(
                mappedData
            )};
            `,
            { ...prettierConfig, parser: "typescript" }
        );

        fs.writeFileSync(`${directory}/${fileName}.ts`, formattedData);
    });
};

generateLocalisedLocationMappings();

fs.unlinkSync("src/utils/sluggify.js");
fs.unlinkSync("src/scripts/generateLocalisedLocationMappings.js");
