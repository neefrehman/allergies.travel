/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable @typescript-eslint/no-var-requires */
import * as fs from "fs";

import fetch from "node-fetch";
import type { Country } from "world-countries";

import { sluggify } from "../utils/sluggify";

const prettier = require("prettier");
const countryData: Country[] = require("world-countries"); // require needed to avoid `world_countries_1["default"]` error

const supportedLocales: string[] = require("../../next.config").i18n.locales;

/**
 * Uses the geonames API to fetch and cache localised location names that Intl.DisplayNames
 * can't create for us (region, capital, etc.). these are then used by `generateBaseCountryData.ts`
 */
const generateLocalisedLocationMappings = async () => {
    const prettierConfig = await prettier.resolveConfig("./.prettierrc");

    const directory = "src/utils/i18n";
    if (!fs.existsSync(directory)) {
        fs.mkdirSync(directory);
    }

    const getLocalisedName = async (
        nameInEnglish: string,
        locale: string
    ): Promise<string> => {
        try {
            const geonamesResponse = await fetch(
                `http://api.geonames.org/searchJSON?q=${sluggify(
                    nameInEnglish
                )}&maxRows=1&username=neef&lang=${locale}`
            );
            const data = await geonamesResponse.json();
            const locationName = data?.geonames?.[0]?.name ?? nameInEnglish;
            return locationName;
        } catch (err) {
            console.log(err);
            return nameInEnglish;
        }
    };

    // TODO: Add ability to deepmarge with existing mappings, so I can manually to add new locales construcutively and decrease request count
    // readfileSync doesn't work with ts & import() wont work with named export ðŸ¤”
    const localesToQueryFor = supportedLocales.filter(locale => locale !== "en");
    const dataToCreateMappingsFor = {
        capitals: countryData.map(country => country.capital[0]),
        regions: [...new Set(countryData.map(country => country.region))], // need overwiriting: Americas
        subregions: [...new Set(countryData.map(country => country.subregion))], // need overwiriting: Central Europe, Middle Africa
    } as { [k: string]: string[] };

    Object.keys(dataToCreateMappingsFor).forEach(async key => {
        const mappedData = await dataToCreateMappingsFor[key].reduce(
            async (locationAccumulator, currentLocationName) => {
                const awaitedLocationAccumulator = await locationAccumulator;

                const localisedLocationNames = await localesToQueryFor.reduce(
                    async (localesAccumulator, currentLocale) => {
                        const awaitedLocalesAccumulator = await localesAccumulator;

                        return {
                            ...awaitedLocalesAccumulator,
                            [currentLocale]: await getLocalisedName(
                                currentLocationName,
                                currentLocale
                            ),
                        };
                    },
                    {}
                );

                const localisedCurrentLocationNameMapping = {
                    [currentLocationName]: {
                        en: currentLocationName,
                        ...localisedLocationNames,
                    },
                };

                return {
                    ...awaitedLocationAccumulator,
                    ...localisedCurrentLocationNameMapping,
                };
            },
            {}
        );

        const variableName = `${key.slice(0, -1)}NameMappings`;
        const fileName = `${directory}/${variableName}.ts`;

        // let finalisedData = mappedData;
        // if (fs.existsSync(fileName)) {
        //     // Merge new base data into existing data, while keeping additions from the CMS
        //     const previousData = await import(`../../${fileName}`);
        //     finalisedData = deepMerge(previousData, mappedData);
        // }

        const formattedData = prettier.format(
            `
            /**
             * auto-generated by scripts/generateLocalisedLocationMappings.ts
             */
            export const ${variableName}: Record<string, Record<string, string>> = ${JSON.stringify(
                mappedData
            )};
            `,
            { ...prettierConfig, parser: "typescript" }
        );

        fs.writeFileSync(fileName, formattedData);
    });
};

generateLocalisedLocationMappings();

fs.unlinkSync("src/utils/sluggify.js");
fs.unlinkSync("src/scripts/generateLocalisedLocationMappings.js");
